[{"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/reportWebVitals.js":"1","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/containers/HomePage.js":"2","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/containers/ManageAccountPage.js":"3","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/ChatFeed.js":"4","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/AgreementsList.js":"5","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/NewGoalModal.js":"6","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/containers/TrainingAgreementsPage.js":"7","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/ChatFeedNav.js":"8","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/actions/user.js":"9","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/reducers/agreements.js":"10","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/LoginForm.js":"11","/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/NewTrainingSessionModal.js":"12"},{"size":362,"mtime":1610644949310,"results":"13","hashOfConfig":"14"},{"size":1798,"mtime":1611874585582,"results":"15","hashOfConfig":"14"},{"size":1045,"mtime":1611696458395,"results":"16","hashOfConfig":"14"},{"size":4917,"mtime":1611861036161,"results":"17","hashOfConfig":"14"},{"size":4187,"mtime":1611366612421,"results":"18","hashOfConfig":"14"},{"size":6271,"mtime":1611277514601,"results":"19","hashOfConfig":"14"},{"size":1610,"mtime":1611191005313,"results":"20","hashOfConfig":"14"},{"size":5240,"mtime":1611861036162,"results":"21","hashOfConfig":"14"},{"size":294,"mtime":1611257742739,"results":"22","hashOfConfig":"14"},{"size":2463,"mtime":1611605041310,"results":"23","hashOfConfig":"14"},{"size":2011,"mtime":1611616056251,"results":"24","hashOfConfig":"14"},{"size":12310,"mtime":1611696458391,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"2hgwbj",{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/reportWebVitals.js",[],["53","54"],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/containers/HomePage.js",["55","56","57","58"],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/containers/ManageAccountPage.js",[],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/ChatFeed.js",["59"],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/AgreementsList.js",["60"],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/NewGoalModal.js",[],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/containers/TrainingAgreementsPage.js",["61"],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/ChatFeedNav.js",["62","63"],"import React, { useState, useEffect, createContext, useRef } from 'react';\n// REACT BOOTSTRAP\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Toast from 'react-bootstrap/Toast';\n// COMPONENT DEPENDENCIES\nimport ChatFeed from './ChatFeed';\nimport ChatUser from './ChatUser';\nimport PlaceholderImage from './PlaceholderImage';\n// ACTION CABLE!\nimport actionCable from 'actioncable';\n\nconst CableApp = {}\nCableApp.cable = actionCable.createConsumer('ws://localhost:5000/cable')\nexport const ActionCableContext = createContext()\n\nconst ChatFeedNav = ({ user, agreements }) => {\n\n    const [ activeFeed, setActiveFeed ] = useState({})\n    const [ chatrooms, setChatrooms ] = useState([])\n    const [ showFeed, setShowFeed ] = useState(false)\n    const [ notifications, setNotifications ] = useState([])\n    const notificationsRef = useRef([])\n\n    useEffect(() => {\n        const formattedAgreements = mapAgreementsToChatrooms()\n        setChatrooms([...formattedAgreements])\n    },[ agreements ])\n\n    const userIsTrainer = () => {\n        return user.isTrainer\n    }\n\n    const mapAgreementsToChatrooms = () => {\n        return agreements.map( agreement => {\n            return {\n                id: agreement.id,\n                chatUser: userIsTrainer() ? agreement.client.name : agreement.trainer.name,\n                chatUserImg: userIsTrainer() ? agreement.client.image_url : agreement.trainer.image_url\n            }\n        })\n    }\n\n    const renderDropdownItemsFromState = () => {\n        return chatrooms.map( (room, i) => { \n            return <ChatUser\n                key={ i }\n                event={ () => setAsCurrentFeed(room) }\n                active={ room.id === activeFeed.id }\n                showFeed={ showFeed }\n                agreement={ room }\n                addNewMessageToast={ addNewMessageToast }\n            />\n        })\n    }\n\n    const renderChatfeedFromState = () => {\n        if (!activeFeed.id) return\n        else return (\n            <Nav.Link active={ showFeed } onClick={ toggleChatView }>{ activeFeed.chatUser }</Nav.Link>\n        )\n    }\n\n    const setAsCurrentFeed = room => {\n        if (activeFeed.id === room.id) setActiveFeed({})\n        else setActiveFeed(room)\n        setShowFeed(false)\n    }\n\n    const toggleChatView = e => {\n        setShowFeed(!showFeed)\n    }\n\n    const addNewMessageToast = (chatMessage, agreement) => {\n        const newNotification = {\n            ...chatMessage,\n            chatUser: agreement.chatUser,\n            chatUserImg: agreement.chatUserImg\n        }\n        setNotifications([...notificationsRef.current, newNotification])\n        notificationsRef.current.push(newNotification)\n    }\n\n    const renderToastNotifications = () => {\n        return notifications.map( notification => {\n            return <ToastNotification \n                key={ notification.id }\n                notification={ notification } \n                removeToast={ removeToast }\n            />\n        })\n    }\n\n    const removeToast = id => {\n        const newNotifications = notificationsRef.current.filter(ref => ref.id !== id)\n        notificationsRef.current = newNotifications\n        setNotifications([...newNotifications])\n    }\n\n    return (\n        <ActionCableContext.Provider value={ CableApp.cable }>\n           <Navbar id='chatfeed-nav'fixed='bottom' variant='dark'>\n                <Navbar.Collapse id='chatfeed-nav-items'className=\"justify-content-end\">\n                    <Nav>\n                        { renderChatfeedFromState() }\n                        <NavDropdown title={ user.isTrainer ? 'Clients' : 'Coaches' } id=\"nav-dropdown\" drop='up' alignRight>\n                            { renderDropdownItemsFromState() }\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n                { showFeed ? <ChatFeed \n                    userId={ user.id } \n                    feed={ activeFeed } \n                    showFeed={ showFeed }\n            /> : null }\n            </Navbar>\n            <div \n                id='toast-notification-container' \n                className='d-flex flex-column-reverse align-items-end justify-content-end'\n            >\n                { renderToastNotifications() }\n            </div>\n        </ActionCableContext.Provider>\n        \n    );\n}\n\nconst ToastNotification = ({ notification, removeToast }) => {\n\n    const [ show, setShow ] = useState(true)\n    const { content, id, chatUser, chatUserImg } = notification\n\n    const closeToastNotification = () => {\n        setShow(false)\n        removeToast(id)\n    }\n\n    return (\n        <Toast \n            onClose={ closeToastNotification }\n            show={ show }\n            delay={ 5000 }\n            autohide\n            style={{ minWidth: '220px', flexBasis: 'auto' }}\n        >\n            <Toast.Header>\n                <img src={ chatUserImg } className=\"rounded mr-2\" alt=\"\" />\n                <strong className=\"mr-auto\">{ chatUser }</strong>\n                <small>New Message</small>\n            </Toast.Header>\n            <Toast.Body>{ content }</Toast.Body>\n        </Toast>\n    )\n}\n\nexport default ChatFeedNav;\n",["64","65"],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/actions/user.js",[],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/reducers/agreements.js",[],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/LoginForm.js",[],"/Users/alec/Coding/Flatiron/phase-5-project/quick-trainer-frontend/src/components/NewTrainingSessionModal.js",["66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"75","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"76","line":5,"column":10,"nodeType":"73","messageId":"74","endLine":5,"endColumn":14},{"ruleId":"71","severity":1,"message":"77","line":5,"column":16,"nodeType":"73","messageId":"74","endLine":5,"endColumn":26},{"ruleId":"78","severity":1,"message":"79","line":38,"column":8,"nodeType":"80","endLine":38,"endColumn":14,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":11,"column":8,"nodeType":"80","endLine":11,"endColumn":22,"suggestions":"83"},{"ruleId":"71","severity":1,"message":"75","line":1,"column":27,"nodeType":"73","messageId":"74","endLine":1,"endColumn":36},{"ruleId":"71","severity":1,"message":"84","line":10,"column":8,"nodeType":"73","messageId":"74","endLine":10,"endColumn":24},{"ruleId":"78","severity":1,"message":"85","line":29,"column":7,"nodeType":"80","endLine":29,"endColumn":21,"suggestions":"86"},{"ruleId":"67","replacedBy":"87"},{"ruleId":"69","replacedBy":"88"},{"ruleId":"78","severity":1,"message":"89","line":223,"column":8,"nodeType":"80","endLine":223,"endColumn":23,"suggestions":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Link' is defined but never used.","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cable.subscriptions'. Either include it or remove the dependency array.","ArrayExpression",["93"],"React Hook useEffect has missing dependencies: 'filterActiveAgreements' and 'filterPendingAgreements'. Either include them or remove the dependency array.",["94"],"'PlaceholderImage' is defined but never used.","React Hook useEffect has a missing dependency: 'mapAgreementsToChatrooms'. Either include it or remove the dependency array.",["95"],["91"],["92"],"React Hook useEffect has missing dependencies: 'index' and 'updateWorkoutItem'. Either include them or remove the dependency array. If 'updateWorkoutItem' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [cable.subscriptions, feed]",{"range":"105","text":"106"},"Update the dependencies array to be: [agreements, filterActiveAgreements, filterPendingAgreements]",{"range":"107","text":"108"},"Update the dependencies array to be: [agreements, mapAgreementsToChatrooms]",{"range":"109","text":"110"},"Update the dependencies array to be: [index, updateWorkoutItem, workoutItem]",{"range":"111","text":"112"},[1205,1211],"[cable.subscriptions, feed]",[452,466],"[agreements, filterActiveAgreements, filterPendingAgreements]",[1072,1086],"[agreements, mapAgreementsToChatrooms]",[8530,8545],"[index, updateWorkoutItem, workoutItem]"]